# Arguments
ARG KHIOPSDEV_OS
ARG SERVER_REVISION
FROM ghcr.io/khiopsml/khiops/khiopsdev-${KHIOPSDEV_OS}:latest AS khiopsdev
LABEL maintainer="khiops.team@orange.com"
LABEL description="Container for the development of khiops-python"

# Reuse KHIOPSDEV_OS from previous stage
ARG KHIOPSDEV_OS
ARG KHIOPS_REVISION
# - Install dev tools and miniforge (for the unit tests)
# - Build and install Khiops
# - Set mpich as the default MPI
RUN true \
  && useradd -rm -d /home/rocky -s /bin/bash -g root -u 1000 rocky \
  # Install git (for khiops-python version calculation), pandoc and pip \
  && dnf upgrade -y \
  && dnf search pandoc \
  && dnf install --enablerepo=devel -y \
    git \
    pandoc \
    wget \
  # Install Python 3.11 if on Rocky 8 \
  && if [ "$KHIOPSDEV_OS" = "rocky8" ]; then \
       dnf install -y \
       python3.11 \
       python3.11-pip \
       python3.11-setuptools ; \
     else \
       dnf install -y \
       python3-setuptools \
       python3-pip ; \
     fi \
  # Get Linux distribution codename \
  && if [ -f /etc/os-release ]; then . /etc/os-release; fi \
  && IFS='.' read -ra VERSION <<< "$VERSION_ID" \
  && ROCKY_VERSION=${VERSION[0]} \
  # Obtain the Khiops native package \
  && KHIOPS_PKG_FILE=$KHIOPS_REVISION/khiops-core-openmpi-$(echo ${KHIOPS_REVISION} | tr '-' '_')-1.el$ROCKY_VERSION.x86_64.rpm \
  && wget -O KHIOPS_CORE.rpm "https://github.com/KhiopsML/khiops/releases/download/${KHIOPS_PKG_FILE}" \
  # Install the Khiops native package \
  && dnf install KHIOPS_CORE.rpm -y \
  && rm -f KHIOPS_CORE.rpm \
  # Make sure that MPI is openmpi \
  && source /etc/profile.d/modules.sh \
  && module unload mpi \
  # Hard-code OpenMPI module name \
  && module load mpi/openmpi-x86_64 \
  # Set python to python3.11 and pip to Pip 3.11 on Rocky 8 \
  # Set python to python3 on Rocky 9 \
  && if [ "$KHIOPSDEV_OS" = "rocky8" ]; then \
       alternatives --set python /usr/bin/python3.11 \
       && alternatives --install /usr/bin/pip pip /usr/bin/pip3.11 1 ; \
     else \
       alternatives --install /usr/bin/python python /usr/bin/python3 1 \
       && alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 ; \
     fi \
  # Install miniforge to have multiple Python versions via Conda \
  && mkdir -p /root/miniforge3 && cd /root/miniforge3 \
  && wget https://github.com/conda-forge/miniforge/releases/download/24.1.2-0/Miniforge3-24.1.2-0-Linux-x86_64.sh -O ./Miniforge3_24.1.2-0-Linux-x86_64.sh \
  && echo "dbadb808edf4da00af35d888d3eeebbfdce71972b60bf4b16dbacaee2ab57f28 Miniforge3_24.1.2-0-Linux-x86_64.sh" | sha256sum --check \
  && bash ./Miniforge3_24.1.2-0-Linux-x86_64.sh -b -u -p /root/miniforge3 \
  && rm -rf /root/miniforge3/Miniforge3_24.1.2-0-Linux-x86_64.sh \
  # Clean build files \
  && dnf clean all \
  && rm -rf ./khiops \
  && true

# set up all the supported Python environments under conda (for the unit tests)
# relying on a variable containing all the versions
ARG PYTHON_VERSIONS

# Install Conda packages
# Use `rc` label for alpha or RC khiops-core pre-releases
RUN true \
  && export CONDA="/root/miniforge3/bin/conda" \
  && if [[ $(echo ${KHIOPS_REVISION} | grep -E ".*-(a|rc)\.[0-9]+") ]]; then \
       export RC_LABEL="conda-forge/label/rc::"; \
     else \
       export RC_LABEL=""; \
     fi \
  && /bin/bash -c 'for version in ${PYTHON_VERSIONS}; \
    do \
        CONDA_ENVS="py${version} py${version}_conda"; \
        for CONDA_ENV in $CONDA_ENVS; \
        do \
            $CONDA create -y -n $CONDA_ENV python=${version}; \
        done; \
        $CONDA install -y -n py${version}_conda ${RC_LABEL}khiops-core=$(echo ${KHIOPS_REVISION} | tr -d "-") ; \
    done' \
  && true

RUN mkdir -p /scripts
COPY ./run_service.sh /scripts/run_service.sh
RUN chmod +x /scripts/run_service.sh

FROM ghcr.io/khiopsml/khiops-server:${SERVER_REVISION} AS server
FROM khiopsdev AS base
COPY --from=server /service /usr/bin/service
