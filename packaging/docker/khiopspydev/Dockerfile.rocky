# Arguments
ARG KHIOPSDEV_OS
ARG SERVER_REVISION
FROM ghcr.io/khiopsml/khiops/khiopsdev-${KHIOPSDEV_OS}:latest AS khiopsdev
LABEL maintainer="khiops.team@orange.com"
LABEL description="Container for the development of khiops-python"

# Reuse KHIOPSDEV_OS from previous stage
ARG KHIOPSDEV_OS
ARG KHIOPS_REVISION
# - Install dev tools and miniconda3 (for the unit tests)
# - Build and install Khiops
# - Set mpich as the default MPI
RUN true \
  && useradd -rm -d /home/rocky -s /bin/bash -g root -u 1000 rocky \
  # Install git (for khiops-python version calculation), pandoc and pip \
  && dnf upgrade -y \
  && dnf search pandoc \
  && dnf install --enablerepo=devel -y \
    git \
    pandoc \
    wget \
  # Install Python 3.11 if on Rocky 8 \
  && if [ "$KHIOPSDEV_OS" = "rocky8" ]; then \
       dnf install -y \
       python3.11 \
       python3.11-pip \
       python3.11-setuptools ; \
     else \
       dnf install -y \
       python3-setuptools \
       python3-pip ; \
     fi \
  # Obtain the Khiops sources \
  && git clone https://github.com/khiopsml/khiops.git \
  && cd khiops \
  && git checkout ${KHIOPS_REVISION} \
  # Make sure that MPI is mpich \
  && source /etc/profile.d/modules.sh \
  && module unload mpi \
  # Hard-code MPICH module name \
  && module load mpi/mpich-x86_64 \
  # Build Khiops \
  # Note: We build the JARs and KNI because the `cmake --install` command below doesn't work \
  && cmake --preset linux-gcc-release -DTESTING=OFF -DBUILD_JARS=ON -DCMAKE_INSTALL_PREFIX= \
  && cmake --build --preset linux-gcc-release --parallel \
       --target MODL${MPI_SUFFIX} MODL_Coclustering${MPI_SUFFIX} \
                KhiopsNativeInterface norm_jar khiops_jar \
  && cmake --install ./build/linux-gcc-release \
  && cd .. \
  # Set python to python3.11 and pip to Pip 3.11 on Rocky 8 \
  # Set python to python3 on Rocky 9 \
  && if [ "$KHIOPSDEV_OS" = "rocky8" ]; then \
       alternatives --set python /usr/bin/python3.11 \
       && alternatives --install /usr/bin/pip pip /usr/bin/pip3.11 1 ; \
     else \
       alternatives --install /usr/bin/python python /usr/bin/python3 1 \
       && alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 ; \
     fi \
    # Install miniconda3 to have multiple Python versions via Conda \
    && mkdir -p /root/miniconda3 && cd /root/miniconda3 \
    && wget https://repo.anaconda.com/miniconda/Miniconda3-py312_24.1.2-0-Linux-x86_64.sh -O ./Miniconda3-py312_24.1.2-0-Linux-x86_64.sh \
    && echo "b978856ec3c826eb495b60e3fffe621f670c101150ebcbdeede4f961f22dc438 Miniconda3-py312_24.1.2-0-Linux-x86_64.sh" | sha256sum --check \
    && bash ./Miniconda3-py312_24.1.2-0-Linux-x86_64.sh -b -u -p /root/miniconda3 \
    && rm -rf /root/miniconda3/Miniconda3-py312_24.1.2-0-Linux-x86_64.sh \
  # Clean build files \
  && dnf clean all \
  && rm -rf ./khiops \
  && true

# set up all the supported Python environments under conda (for the unit tests)
# relying on a variable containing all the versions
ARG PYTHON_VERSIONS
RUN for version in ${PYTHON_VERSIONS}; \
    do /root/miniconda3/bin/conda create -y -n py${version} python=${version}; done

RUN mkdir -p /scripts
COPY ./run_service.sh /scripts/run_service.sh
RUN chmod +x /scripts/run_service.sh

FROM ghcr.io/khiopsml/khiops-server:${SERVER_REVISION} AS server
FROM khiopsdev AS base
COPY --from=server /service /usr/bin/service
