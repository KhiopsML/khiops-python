#!/bin/bash
#
# ARG_OPTIONAL_BOOLEAN([clean-tutorial],[],[Cleans the tutorial's directory. Build takes considerably longer after this.])
# ARG_HELP([Cleans the generated documentation])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_clean_tutorial="off"


print_help()
{
	printf '%s\n' "Cleans the generated documentation"
	printf 'Usage: %s [--(no-)clean-tutorial] [-h|--help]\n' "$0"
	printf '\t%s\n' "--clean-tutorial, --no-clean-tutorial: Cleans the tutorial's directory. Build takes considerably longer after this. (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-clean-tutorial|--clean-tutorial)
				_arg_clean_tutorial="on"
				test "${1:0:5}" = "--no-" && _arg_clean_tutorial="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

rm -v core/generated/*.rst
rm -v sklearn/generated/*.rst
rm -v internal/generated/*.rst
make clean

if [[ $_arg_clean_tutorial == "on" ]]
then
  rm -rfv khiops-python-tutorial
  rm -rfv ./tutorials
fi

# ] <-- needed because of Argbash
